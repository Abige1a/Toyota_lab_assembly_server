//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.XarmMoveit
{
    [Serializable]
    public class UnityRobotServiceResponse : Message
    {
        public const string k_RosMessageName = "xarm_moveit/UnityRobotService";
        public override string RosMessageName => k_RosMessageName;

        public Geometry.PoseMsg current_pose;
        public Moveit.RobotTrajectoryMsg[] trajectories;
        public double gripper_status;

        public UnityRobotServiceResponse()
        {
            this.current_pose = new Geometry.PoseMsg();
            this.trajectories = new Moveit.RobotTrajectoryMsg[0];
            this.gripper_status = 0.0;
        }

        public UnityRobotServiceResponse(Geometry.PoseMsg current_pose, Moveit.RobotTrajectoryMsg[] trajectories, double gripper_status)
        {
            this.current_pose = current_pose;
            this.trajectories = trajectories;
            this.gripper_status = gripper_status;
        }

        public static UnityRobotServiceResponse Deserialize(MessageDeserializer deserializer) => new UnityRobotServiceResponse(deserializer);

        private UnityRobotServiceResponse(MessageDeserializer deserializer)
        {
            this.current_pose = Geometry.PoseMsg.Deserialize(deserializer);
            deserializer.Read(out this.trajectories, Moveit.RobotTrajectoryMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.gripper_status);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.current_pose);
            serializer.WriteLength(this.trajectories);
            serializer.Write(this.trajectories);
            serializer.Write(this.gripper_status);
        }

        public override string ToString()
        {
            return "UnityRobotServiceResponse: " +
            "\ncurrent_pose: " + current_pose.ToString() +
            "\ntrajectories: " + System.String.Join(", ", trajectories.ToList()) +
            "\ngripper_status: " + gripper_status.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize, MessageSubtopic.Response);
        }
    }
}
