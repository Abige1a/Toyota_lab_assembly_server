//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.XarmMoveit
{
    [Serializable]
    public class UnityDetectionServiceRequest : Message
    {
        public const string k_RosMessageName = "xarm_moveit/UnityDetectionService";
        public override string RosMessageName => k_RosMessageName;

        public double[] colorK;
        public Sensor.ImageMsg rgb;
        public Sensor.ImageMsg depth;
        public Geometry.PoseMsg pose;
        public string prompt;
        public int detect_mode;
        public int[] bbox;
        public int[] points;

        public UnityDetectionServiceRequest()
        {
            this.colorK = new double[0];
            this.rgb = new Sensor.ImageMsg();
            this.depth = new Sensor.ImageMsg();
            this.pose = new Geometry.PoseMsg();
            this.prompt = "";
            this.detect_mode = 0;
            this.bbox = new int[0];
            this.points = new int[0];
        }

        public UnityDetectionServiceRequest(double[] colorK, Sensor.ImageMsg rgb, Sensor.ImageMsg depth, Geometry.PoseMsg pose, string prompt, int detect_mode, int[] bbox, int[] points)
        {
            this.colorK = colorK;
            this.rgb = rgb;
            this.depth = depth;
            this.pose = pose;
            this.prompt = prompt;
            this.detect_mode = detect_mode;
            this.bbox = bbox;
            this.points = points;
        }

        public static UnityDetectionServiceRequest Deserialize(MessageDeserializer deserializer) => new UnityDetectionServiceRequest(deserializer);

        private UnityDetectionServiceRequest(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.colorK, sizeof(double), deserializer.ReadLength());
            this.rgb = Sensor.ImageMsg.Deserialize(deserializer);
            this.depth = Sensor.ImageMsg.Deserialize(deserializer);
            this.pose = Geometry.PoseMsg.Deserialize(deserializer);
            deserializer.Read(out this.prompt);
            deserializer.Read(out this.detect_mode);
            deserializer.Read(out this.bbox, sizeof(int), deserializer.ReadLength());
            deserializer.Read(out this.points, sizeof(int), deserializer.ReadLength());
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.WriteLength(this.colorK);
            serializer.Write(this.colorK);
            serializer.Write(this.rgb);
            serializer.Write(this.depth);
            serializer.Write(this.pose);
            serializer.Write(this.prompt);
            serializer.Write(this.detect_mode);
            serializer.WriteLength(this.bbox);
            serializer.Write(this.bbox);
            serializer.WriteLength(this.points);
            serializer.Write(this.points);
        }

        public override string ToString()
        {
            return "UnityDetectionServiceRequest: " +
            "\ncolorK: " + System.String.Join(", ", colorK.ToList()) +
            "\nrgb: " + rgb.ToString() +
            "\ndepth: " + depth.ToString() +
            "\npose: " + pose.ToString() +
            "\nprompt: " + prompt.ToString() +
            "\ndetect_mode: " + detect_mode.ToString() +
            "\nbbox: " + System.String.Join(", ", bbox.ToList()) +
            "\npoints: " + System.String.Join(", ", points.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
